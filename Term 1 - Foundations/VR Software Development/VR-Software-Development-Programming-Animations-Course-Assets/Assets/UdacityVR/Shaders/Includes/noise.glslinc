////Noise Fields
//#ifndef CURVES
//#include "Includes/curves.glslinc"
//#endif
//
//#ifndef HASHES
//#include "Includes/hashes.glslinc"
//#endif

//float 	noise(vec2 uv);
//float 	voronoi(in vec2 v);
//vec3 	voronoi_normal(vec2 p);
//float 	fbm(vec2 uv);

float noise(in vec2 uv)
{
    	const float k 	= 257.;
    	vec4 l  		= vec4(floor(uv),fract(uv));
    	float u 		= l.x + l.y * k;
    	vec4 v  		= vec4(u, u+1.,u+k, u+k+1.);
    	v       		= fract(fract(1.23456789*v)*v/.987654321);
    	l.zw    		= l.zw*l.zw*(3.-2.*l.zw);
    	l.x     		= mix(v.x, v.y, l.z);
    	l.y     		= mix(v.z, v.w, l.z);
    	return mix(l.x, l.y, l.w);
}


float fbm(vec2 uv)
{
	float a = .5;
	float f = 2.;
	float n = 0.;
	uv 		+= 5.;
	for(int i = 0; i < 8; i++)
	{
			n += noise(uv*f)*a;
			a *= .5;
			f *= 2.;
	}
	return n;
} 


float voronoi( in vec2 v )
{
    vec2 p = floor(v);
    vec2 f = fract(v);

    float res = 0.0;
    for( int j=-1; j<=1; j++ )
    {
    	for( int i=-1; i<=1; i++ )
    	{
        	vec2 b  = vec2( i, j );
        	vec2  r = vec2(b) - f + hash(p + b);
        	float d = dot(r, r);

        	res += 1./pow(d, 8.);
    	}
    }

    return pow( 1./res, 1./16. );
} 


vec3 voronoi_normal(vec2 p) 
{
	float d = .01;
	
	vec3 dx = vec3(  d, 0., voronoi(p + vec2( d, 0.))) 
	    	- vec3( -d, 0., voronoi(p + vec2(-d, 0.)));

	vec3 dy = vec3( 0.,  d, voronoi(p + vec2( 0., d))) 
			- vec3( 0., -d, voronoi(p + vec2( 0.,-d)));

	return normalize(cross(dx,dy));
}
