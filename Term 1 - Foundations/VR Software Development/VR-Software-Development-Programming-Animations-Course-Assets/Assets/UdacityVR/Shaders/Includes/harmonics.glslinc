//spherical harmonics
vec3 spherical_harmonic(vec3 n)
{     
	vec4 c[7];
	c[0] = vec4(0.0, 0.5, 0.0, 0.4);
	c[1] = vec4(0.0, 0.3, .05, .45);
	c[2] = vec4(0.0, 0.3, -.3, .85);
	c[3] = vec4(0.0, 0.2, 0.1, 0.0);
	c[4] = vec4(0.0, 0.2, 0.1, 0.0);
	c[5] = vec4(0.1, 0.1, 0.1, 0.0);
	c[6] = vec4(0.0, 0.0, 0.0, 0.0);   
	
	vec4 p = vec4(n, 1.);

	vec3 l1 = vec3(0.);
	l1.r = dot(c[0], p);
	l1.g = dot(c[1], p);
	l1.b = dot(c[2], p);

	vec4 m2 = p.xyzz * p.yzzx;
	vec3 l2 = vec3(0.);
	l2.r = dot(c[3], m2);
	l2.g = dot(c[4], m2);
	l2.b = dot(c[5], m2);

	float m3 = p.x*p.x - p.y*p.y;
	vec3 l3 = vec3(0.);
	l3 = c[6].xyz * m3;

	vec3 sh = vec3(l1 + l2 + l3);

	return clamp(sh, 0., 1.);
}


struct sh
{
	vec3 l22;
	vec3 l20;
	vec3 l00;
	vec3 l2m2;
	vec3 l21;
	vec3 l2m1;
	vec3 l11;
	vec3 l1m1;
	vec3 l10;  
};


sh shgrove = sh(
	vec3( 0.3783264,  0.4260425,  0.4504587),
	vec3( 0.2887813,  0.3586803,  0.4147053),
	vec3( 0.0379030,  0.0295216,  0.0098567),
	vec3(-0.1033028, -0.1031690, -0.0884924),
	vec3(-0.0621750, -0.0554432, -0.0396779),
	vec3( 0.0077820, -0.0148312, -0.0471301),
	vec3(-0.0935561, -0.1254260, -0.1525629),
	vec3(-0.0572703, -0.0502192, -0.0363410),
	vec3( 0.0203348, -0.0044201, -0.0452180)
);


sh shbeach = sh(
	vec3( 0.6841148,  0.6929004,  0.7069543),
	vec3( 0.3173355,  0.3694407,  0.4406839),
	vec3(-0.1747193, -0.1737154, -0.1657420),
	vec3(-0.4496467, -0.4155184, -0.3416573),
	vec3(-0.1690202, -0.1703022, -0.1525870),
	vec3(-0.0837808, -0.0940454, -0.1027518),
	vec3(-0.0319670, -0.0214051, -0.0147691),
	vec3( 0.1641816,  0.1377558,  0.1010403),
	vec3( 0.3697189,  0.3097930,  0.2029923)
);


sh shtomb = sh(
    vec3( 1.0351604,  0.7603549,  0.7074635),
	vec3( 0.4442150,  0.3430402,  0.3403777),
	vec3(-0.2247797, -0.1828517, -0.1705181),
	vec3( 0.7110400,  0.5423169,  0.5587956),
	vec3( 0.6430452,  0.4971454,  0.5156357),
	vec3(-0.1150112, -0.0936603, -0.0839287),
	vec3(-0.3742487, -0.2755962, -0.2875017),
	vec3(-0.1694954, -0.1343096, -0.1335315),
	vec3( 0.5515260,  0.4222179,  0.4162488)
);


vec3 harmonic(vec3 n, sh c)
{
	float x = n.x;
	float y = n.y;
	float z = n.z;
	
	const float c0 = 0.429043;
	const float c1 = 0.511664;
	const float c2 = 0.743125;
	const float c3 = 0.886227;
	const float c4 = 0.247708;
	
	return (
	c0 * c.l22  * (x * x - y * y) +
	c2 * c.l20  *  z * z +
	c3 * c.l00  -
	c4 * c.l20  +
	c0 * c.l2m2 * 2. * x * y +
	c0 * c.l21  * 2. * x * z +
	c0 * c.l2m1 * 2. * y * z +
	c1 * c.l11  * 2. * x +
	c1 * c.l1m1 * 2. * y +
	c1 * c.l10  * 2. * z
	);
} 