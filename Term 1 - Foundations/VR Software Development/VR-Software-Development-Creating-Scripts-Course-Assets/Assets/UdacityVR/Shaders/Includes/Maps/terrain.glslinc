#include "Includes/hashes.glslinc"
#include "Includes/matrices.glslinc"
#include "Includes/noise.glslinc"

float bound(float angle)
{
	return max(angle, .00392156);
}


float fold(in float x)
{
	return bound(abs(fract(x)-.5));
}

vec3 fold(in vec3 p)
{
	return vec3(fold(p.x), fold(p.y), fold(p.z));
}

float origami(in vec3 position)
{
	float amplitude = .5;	
	float frequency	= 2.;
	float result	= 0.;
	for(int i = 0; i < 6; i++)
	{
		position 	+= fold(position + fold(position).yzx).zxy;
		result		+= length(cross(position, position.zyx)) * amplitude;
		position 	*= frequency;

		amplitude 	*= .5;
	}
	
	return result * pow(2., -8.);
}

float island_map(vec3 position)
{
	float falloff		= smoothstep(.45, 0., length(position.xz)) * .25;

	position.xz 		*= rmat(2.24);
	
	float terrain		= fbm(position.xz+vec2(15., 2.))*.5;
	
	return falloff * .5 - falloff * terrain * .5;
}
