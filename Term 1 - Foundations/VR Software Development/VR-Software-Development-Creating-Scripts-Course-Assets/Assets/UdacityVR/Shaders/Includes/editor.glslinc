#define FIELDS 16
// Upgrade NOTE: excluded shader from DX11 and Xbox360 because it uses wrong array syntax (type[size] name)
#pragma exclude_renderers d3d11 xbox360
uniform mat4x4[FIELDS]		_Transform;
uniform mat4x4[FIELDS]		_Function;

vec3 transform(vec3 position, mat4 trs)
{
	return ((vec4(position,1.)-trs[3]) * trs).xyz;
}

float primitive(vec3 position, float type)
{
	if(type == 1.)
	{
		return cube(position, vec3(.5));
	}
	else
	{
		return sphere(position, .5);
	}
	
	return FAR_PLANE;
}

vec2 mirror(vec2 position, float n, float t)
{
	float r = length(position.xy);
	float a = atan(position.y, position.x);
	float c = PI/n;

	a 			= mod(a, 2. * c) - c;
	position.x 	= r * cos(a)-t;
	position.y 	= r * sin(a);
	return position.xy;
}

float edit_list(vec3 position)
{
	float result 			= FAR_PLANE;
	
	float fields_min		= FAR_PLANE;
	float fields_subtract	= FAR_PLANE;
	float fields_union		= 0.;

	float minima			= FAR_PLANE;
	float subtract			= FAR_PLANE;
	float mask				= 0.;
	
	float smooth_min		= FAR_PLANE;
	float smooth_count	 	= 0.;
	float smooth_average 	= 0.;
	
	vec3 field_position		= position;

	float[FIELDS] field;
	for(int i = 0; i < FIELDS; i++)
	{
		float type 		= _Function[i][2][3];
		float operation = _Function[i][0][0];
		
		bool modulus 	= _Function[i][1][3] >= 0.;
		bool radial		= dot(_Function[i][1].xyz, vec3(0.)) >= 0.;

		if(type != 0.)
		{
			field_position = transform(position, _Transform[i]);
	
			if(modulus)
			{
				float half_mod = _Function[i][1][3] * .5;
				field_position = mod(field_position - half_mod, _Function[i][1][3]) - half_mod;
			}

			if(_Function[i][1][0] != 0.)
			{							
				field_position.xz = mirror(field_position.xz, _Function[i][1][0], _Function[i][1][2]);
			}

			field[i] 			= primitive(field_position, type);

			field[i] 			 -= _Function[i][1][1];
			


			if(operation < 3.)
			{
				if(operation == 0.)
				{
					minima		= min(minima, field[i]);
				}
				
				if(operation == 1.)
				{
					subtract	= min(subtract, field[i]);
				}
				
				if(operation == 2.)
				{
					mask		= max(mask, field[i]);
				}
			}
			else
			{
				smooth_count++;
				smooth_average 	+= _Function[i][0][1]/smooth_count;
				smooth_min 		= smoothmin(smooth_min, field[i], 10.-smooth_average);
			}
		}
	}

	minima	= max(-subtract, minima);
	minima	= max(mask, minima);

	if(smooth_count > 0.)
	{						
		minima 			= smoothmin(smooth_min, minima, 10.);
	}
	
	return minima;
} 
